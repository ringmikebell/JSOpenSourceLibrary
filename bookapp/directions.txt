section 1
Set up a new folder.
Command line - node --versoin
	console.log("Hello")
    set a var hi = "hello";
    console.log(hi)
create an app.js file
Add some code and console.log it.
run node app.js 
Should say "Hello Node"

Add express code
	
	var express = require('express');

npm - package management system


npm install express --save
	added to package.json


TEXT EDITORS
ATOM, Brackets, Editors, NPM

NPM VERSIOS
  Versioning Packages
  ^4.13.3 - NPM will install same major version.
  	^4.xx.x - will take 4.14.1
  	Can use a ~4.13.3 to take minor upgrades 4.13.4
  	- not taking 4.14.

  npm update - will install packages

  over the course of time, the packages change.
  Go in and specifically state

  NODE IS
  Server side JS framework/engine


WHAT ARE WE BUILDING
a library application

EXPRESS CONFIG
remove random code
reference to express - points to it
doesn't give us ability 

var app = express();  //instance of express that we can do stuff with

var port = 5000   //port express listens on
app.listen(5000, function(err){
	console.log('running server on port' + port);
});  

//callback - function that app

node app.js on cmd
running server on port 5000

//server is ready to go
//doesn't know what to do, but it's there


Kicking off server ->
	Next person doesn't have to care which file should run -> need standard way to execute

	package.json
		scripts
			add "start":"node app.js"


SIMPLE ROUTING
Add route so express can deal with requests

under var port
app.get('/', function(request, response){
	response.send("hello world");
});

slash is the home route /localhost 5000
request - Info coming from the browser
response - stuff we'll deal with

console -> ctrl c
Pull up browser & localhost:5000 

Taking a request from the browser
Sending it something back

copy get and do hello books

change /books

open localhost & check out localhost 5000/books






BOOTSTRAP TEMPLATE
storystrap boostrapzero

download the template

unzip it
create a public folder in project 
	add css & js folders to it

create a src folder
	create a views folder in there
		copy index.html there


having to do app.get / is dumb

PUBLIC AS Status
set up public directory as static directory

//set up some middleware
//used by express first
//anytime a requets is made to something css-> styles.css -First thing it will look in public

	app.use(express.static('public'));

	npm app.js
	localhost:5000
	localhost:5000/css/styles.css -> we will see css
	//another static site -> just serves stuff up
	app.use(express.static('src/views'));

save & restart server

In theory, entire static web site could go in there and it would work with static content.
It would be done. 21 lines of code.

INDEX.HTML
change 
bootstrap line 9 & 10
script jquery tags 250 & 251

go get latest versions of those things using Bower


BOWER
Bower - package manager for web packages 
		-front end 
		-install with npm
		-flat package hierachy - bootstrap and jquery at same level
		-bower install to install packages
		-Bower.json

npm - backend package manager

	npm install bower -g  //installs bower globally

	type bower - it now works
	bower init
		default questions

	bower.json

	bower install --save bootstrap
	installs bootstrap and jquery
		-bootstrap requires jquery so it installs jquery(a dependency) as well

BOWER COMPONENTS DIRECTORY
long name - painful typing it out
not in public static
need Bower to install files into public dir

new file top dir

	.bowerrc
		json doc

		{
			"directory":"public/lib"
		}


		//css dir and js dir are for our css & js files. We wantsegregate bower's stuff in lib directory

	delete bowercoponents dir

	bower install --save bootstrap
	creates a lib director

	line9:	lib/bootstrap/dist/css/bootstrap.min.css

	251: lib...dist

	250: lib/jquery/dist/jquery.min.js

	bower install font-awesome --save

bower.json - 2 dependencies at bottom

	10: lib/font-awesome/css/font-awesome.min.css

save and refresh the site 
restart the server

develooper tools 
check sources on css & bootstrap
make sure in google tools

GULP
-helps with restart server
-typing out all the bootstrap stuff


CONFIGURATION
gulp
	-task manager for project
	-manage tasks
	-npm install
	-code based configuration
	-package based
JSHINT
	-code quality enforcement
	detects errors
	-enforces conventions
	-easy config

JSCS
	-coding styles/conventions
	-easy config

jonathanmills/codingstandards

jscs -
jshint - 

	download the files
	paste them in

	linting tools in sublime 4:00?

INSTALL GULP
	npm install -g gulp
	gulp (local not found)
	npm install gulp --save-dev //dev dependencis file in packages

	create gulpfile.js

	var gulp = require('gulp');
	var jshint = require('gulp-jshint');
	var jscs = require('gulp-jscs');

	var jsFiles = ['*.js', 'src/**/*.js'];

	gulp.task('style', function(){
		return gulp.src(jsFiles)
			.pipe(jshint());
			.pipe(jshint.report('jshint-stylish', { verbose: true }));
			.pipe(jscs());
	});


		npm install --save-dev gulp-jshint gulp-jscs jshint-stylish

		should see this in package.json

		gulp style

	SETTING UP WIREDUP
	Install html automatically
		npm install wiredep --save-dev

	gulp.js
		gulp.task('inject',function(){
		var wiredep = require('wiredep').stream;
		var options = {
			bowerJson: require('./bower.json')
			directory: './public/lib'
		}
		return gulp.src('./ssrc/views/*.html')
		.pipe(wiredep(options))
		.pipe(gulp.dest('./src/views'));

		});

		Go to index.html
		Delete scripts on 250 & 251

		Got to line 11 
		<!--bower:js-->
		line 12
		<!--endbower-->

		gulp inject

		line 11/12 - This won't work.
		<!--bower:css-->
		<!--endbower-->

FIX BOOTSTRAP AND WIREDEP
	our bower.json file
		past in some overrides under dependencies:
			"overrides":{
				"bootstrap":{
					"main": [
						"dist/js/bootstrap.js",
						"dist/css/bootstrap.min.css",
						"less/bootstrap.less"
					]
				},
				"font-awesome": {
					"main": [
						"less/font-awesome.less",
						"css/font-awesome.min.css",
						"scss/font-awesmoe.scss"

					]
				}
			}


			//Save this - overriding the other bower.json in the bower lib

			gulp inject

	Dealing with the ../
	gulp file

		add this to opitnos
			ignorePath: '../../public'

			run: gulp inject


	npm gulp inject --save-dev

	in package.json - gulp-inject is in devD

	gulp.js
	//under wiredep requre

	var inject = require('gulp-inject');
	var injectSrc =  gulp.src(['./public/css/*.css', './public/js/.*.js'], {read: false});

	var injectOptions = {
		ignorePath: '/publc'
	}


	//add a pipe
	.pipe(inject(injectSrc, injectOptions))

	Go to index.html

	line 17 under <!--endbower-->
	<!--inject:css-->
	<!--endinject-->
	<!--inject:js-->
	<!--endinject-->

	gulp-inject

	if needed, delete css/bootstrap.min.css
	bootstrap.min.js

	create a new js file 
	app.js 


This is important when we have more than one javascript file
automatically updates html files


NODEMON
//monitor files for changes
//auto restart server

	npm install --save-dev gulp-nodemon

gulp file

	var nodemon = require('gulp-nodemon');

	gulp.task('serve', ['style', 'inject'], function(){
		var options = {
			script: 'app.js',
			delayTime: 1,
			env: {
				'PORT' : 5000
			},
			watch: jsFiles
		}
		return nodemon(options)
			.on('restart', function(ev){
				console.log('Restarting....');
			})
	})

//as events fire, we can send functions in


	gulp serve  //fails? - ran styles to check everything then failed


	//experiment with changing to PORT 3000

	//in app.js change var port

	var port = process.env.PORT || 5000;


//TEMPLATING ENGINES
	-engines allow express to build pages for us.
	-Jade
	-Handlebars
	-EJS

JADE
	-runs through a compiler, a little different than HTML
		eliminate closing tags
		need to be paragraphed
		html
			head
				title Our app

	app.js 

	change app.use(express.static('src/views'))

	to 
	app.set('views', './src/views');
	app.set('view engine', 'jade');

	INSTALL JADE

	npm install --save jade

	check package.json

	Inside views
	new file
		index.jade
	html
		head
			title OurApp
		body
			h1 My App
			p
				h3 here it is	

	change  app.get in app.js
		res.render('index')	

		node app.js

		Should see a basic jade app

JADE AND JAVASCRIPT

	html
			head
				title OurApp
			body(class ='myClass')
				h1 My App
				p
					h3 here it is			

HANDLEBARS


EJS



ROUTING

 





























































































































































